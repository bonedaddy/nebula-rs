// This file is generated by rust-protobuf 2.24.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `cert.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_24_1;

#[derive(PartialEq,Clone,Default)]
pub struct RawNebulaCertificate {
    // message fields
    pub Details: ::protobuf::SingularPtrField<RawNebulaCertificateDetails>,
    pub Signature: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RawNebulaCertificate {
    fn default() -> &'a RawNebulaCertificate {
        <RawNebulaCertificate as ::protobuf::Message>::default_instance()
    }
}

impl RawNebulaCertificate {
    pub fn new() -> RawNebulaCertificate {
        ::std::default::Default::default()
    }

    // .cert.RawNebulaCertificateDetails Details = 1;


    pub fn get_Details(&self) -> &RawNebulaCertificateDetails {
        self.Details.as_ref().unwrap_or_else(|| <RawNebulaCertificateDetails as ::protobuf::Message>::default_instance())
    }
    pub fn clear_Details(&mut self) {
        self.Details.clear();
    }

    pub fn has_Details(&self) -> bool {
        self.Details.is_some()
    }

    // Param is passed by value, moved
    pub fn set_Details(&mut self, v: RawNebulaCertificateDetails) {
        self.Details = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Details(&mut self) -> &mut RawNebulaCertificateDetails {
        if self.Details.is_none() {
            self.Details.set_default();
        }
        self.Details.as_mut().unwrap()
    }

    // Take field
    pub fn take_Details(&mut self) -> RawNebulaCertificateDetails {
        self.Details.take().unwrap_or_else(|| RawNebulaCertificateDetails::new())
    }

    // bytes Signature = 2;


    pub fn get_Signature(&self) -> &[u8] {
        &self.Signature
    }
    pub fn clear_Signature(&mut self) {
        self.Signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_Signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.Signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.Signature
    }

    // Take field
    pub fn take_Signature(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.Signature, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for RawNebulaCertificate {
    fn is_initialized(&self) -> bool {
        for v in &self.Details {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.Details)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.Signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.Details.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.Signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.Signature);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.Details.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.Signature.is_empty() {
            os.write_bytes(2, &self.Signature)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RawNebulaCertificate {
        RawNebulaCertificate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RawNebulaCertificateDetails>>(
                "Details",
                |m: &RawNebulaCertificate| { &m.Details },
                |m: &mut RawNebulaCertificate| { &mut m.Details },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "Signature",
                |m: &RawNebulaCertificate| { &m.Signature },
                |m: &mut RawNebulaCertificate| { &mut m.Signature },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RawNebulaCertificate>(
                "RawNebulaCertificate",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RawNebulaCertificate {
        static instance: ::protobuf::rt::LazyV2<RawNebulaCertificate> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RawNebulaCertificate::new)
    }
}

impl ::protobuf::Clear for RawNebulaCertificate {
    fn clear(&mut self) {
        self.Details.clear();
        self.Signature.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RawNebulaCertificate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RawNebulaCertificate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RawNebulaCertificateDetails {
    // message fields
    pub Name: ::std::string::String,
    pub Ips: ::std::vec::Vec<u32>,
    pub Subnets: ::std::vec::Vec<u32>,
    pub Groups: ::protobuf::RepeatedField<::std::string::String>,
    pub NotBefore: i64,
    pub NotAfter: i64,
    pub PublicKey: ::std::vec::Vec<u8>,
    pub IsCA: bool,
    pub Issuer: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RawNebulaCertificateDetails {
    fn default() -> &'a RawNebulaCertificateDetails {
        <RawNebulaCertificateDetails as ::protobuf::Message>::default_instance()
    }
}

impl RawNebulaCertificateDetails {
    pub fn new() -> RawNebulaCertificateDetails {
        ::std::default::Default::default()
    }

    // string Name = 1;


    pub fn get_Name(&self) -> &str {
        &self.Name
    }
    pub fn clear_Name(&mut self) {
        self.Name.clear();
    }

    // Param is passed by value, moved
    pub fn set_Name(&mut self, v: ::std::string::String) {
        self.Name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Name(&mut self) -> &mut ::std::string::String {
        &mut self.Name
    }

    // Take field
    pub fn take_Name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.Name, ::std::string::String::new())
    }

    // repeated uint32 Ips = 2;


    pub fn get_Ips(&self) -> &[u32] {
        &self.Ips
    }
    pub fn clear_Ips(&mut self) {
        self.Ips.clear();
    }

    // Param is passed by value, moved
    pub fn set_Ips(&mut self, v: ::std::vec::Vec<u32>) {
        self.Ips = v;
    }

    // Mutable pointer to the field.
    pub fn mut_Ips(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.Ips
    }

    // Take field
    pub fn take_Ips(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.Ips, ::std::vec::Vec::new())
    }

    // repeated uint32 Subnets = 3;


    pub fn get_Subnets(&self) -> &[u32] {
        &self.Subnets
    }
    pub fn clear_Subnets(&mut self) {
        self.Subnets.clear();
    }

    // Param is passed by value, moved
    pub fn set_Subnets(&mut self, v: ::std::vec::Vec<u32>) {
        self.Subnets = v;
    }

    // Mutable pointer to the field.
    pub fn mut_Subnets(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.Subnets
    }

    // Take field
    pub fn take_Subnets(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.Subnets, ::std::vec::Vec::new())
    }

    // repeated string Groups = 4;


    pub fn get_Groups(&self) -> &[::std::string::String] {
        &self.Groups
    }
    pub fn clear_Groups(&mut self) {
        self.Groups.clear();
    }

    // Param is passed by value, moved
    pub fn set_Groups(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.Groups = v;
    }

    // Mutable pointer to the field.
    pub fn mut_Groups(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.Groups
    }

    // Take field
    pub fn take_Groups(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.Groups, ::protobuf::RepeatedField::new())
    }

    // int64 NotBefore = 5;


    pub fn get_NotBefore(&self) -> i64 {
        self.NotBefore
    }
    pub fn clear_NotBefore(&mut self) {
        self.NotBefore = 0;
    }

    // Param is passed by value, moved
    pub fn set_NotBefore(&mut self, v: i64) {
        self.NotBefore = v;
    }

    // int64 NotAfter = 6;


    pub fn get_NotAfter(&self) -> i64 {
        self.NotAfter
    }
    pub fn clear_NotAfter(&mut self) {
        self.NotAfter = 0;
    }

    // Param is passed by value, moved
    pub fn set_NotAfter(&mut self, v: i64) {
        self.NotAfter = v;
    }

    // bytes PublicKey = 7;


    pub fn get_PublicKey(&self) -> &[u8] {
        &self.PublicKey
    }
    pub fn clear_PublicKey(&mut self) {
        self.PublicKey.clear();
    }

    // Param is passed by value, moved
    pub fn set_PublicKey(&mut self, v: ::std::vec::Vec<u8>) {
        self.PublicKey = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_PublicKey(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.PublicKey
    }

    // Take field
    pub fn take_PublicKey(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.PublicKey, ::std::vec::Vec::new())
    }

    // bool IsCA = 8;


    pub fn get_IsCA(&self) -> bool {
        self.IsCA
    }
    pub fn clear_IsCA(&mut self) {
        self.IsCA = false;
    }

    // Param is passed by value, moved
    pub fn set_IsCA(&mut self, v: bool) {
        self.IsCA = v;
    }

    // bytes Issuer = 9;


    pub fn get_Issuer(&self) -> &[u8] {
        &self.Issuer
    }
    pub fn clear_Issuer(&mut self) {
        self.Issuer.clear();
    }

    // Param is passed by value, moved
    pub fn set_Issuer(&mut self, v: ::std::vec::Vec<u8>) {
        self.Issuer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Issuer(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.Issuer
    }

    // Take field
    pub fn take_Issuer(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.Issuer, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for RawNebulaCertificateDetails {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.Name)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.Ips)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.Subnets)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.Groups)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.NotBefore = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.NotAfter = tmp;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.PublicKey)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.IsCA = tmp;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.Issuer)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.Name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.Name);
        }
        for value in &self.Ips {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.Subnets {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.Groups {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        if self.NotBefore != 0 {
            my_size += ::protobuf::rt::value_size(5, self.NotBefore, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.NotAfter != 0 {
            my_size += ::protobuf::rt::value_size(6, self.NotAfter, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.PublicKey.is_empty() {
            my_size += ::protobuf::rt::bytes_size(7, &self.PublicKey);
        }
        if self.IsCA != false {
            my_size += 2;
        }
        if !self.Issuer.is_empty() {
            my_size += ::protobuf::rt::bytes_size(9, &self.Issuer);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.Name.is_empty() {
            os.write_string(1, &self.Name)?;
        }
        for v in &self.Ips {
            os.write_uint32(2, *v)?;
        };
        for v in &self.Subnets {
            os.write_uint32(3, *v)?;
        };
        for v in &self.Groups {
            os.write_string(4, &v)?;
        };
        if self.NotBefore != 0 {
            os.write_int64(5, self.NotBefore)?;
        }
        if self.NotAfter != 0 {
            os.write_int64(6, self.NotAfter)?;
        }
        if !self.PublicKey.is_empty() {
            os.write_bytes(7, &self.PublicKey)?;
        }
        if self.IsCA != false {
            os.write_bool(8, self.IsCA)?;
        }
        if !self.Issuer.is_empty() {
            os.write_bytes(9, &self.Issuer)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RawNebulaCertificateDetails {
        RawNebulaCertificateDetails::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "Name",
                |m: &RawNebulaCertificateDetails| { &m.Name },
                |m: &mut RawNebulaCertificateDetails| { &mut m.Name },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "Ips",
                |m: &RawNebulaCertificateDetails| { &m.Ips },
                |m: &mut RawNebulaCertificateDetails| { &mut m.Ips },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "Subnets",
                |m: &RawNebulaCertificateDetails| { &m.Subnets },
                |m: &mut RawNebulaCertificateDetails| { &mut m.Subnets },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "Groups",
                |m: &RawNebulaCertificateDetails| { &m.Groups },
                |m: &mut RawNebulaCertificateDetails| { &mut m.Groups },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "NotBefore",
                |m: &RawNebulaCertificateDetails| { &m.NotBefore },
                |m: &mut RawNebulaCertificateDetails| { &mut m.NotBefore },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "NotAfter",
                |m: &RawNebulaCertificateDetails| { &m.NotAfter },
                |m: &mut RawNebulaCertificateDetails| { &mut m.NotAfter },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "PublicKey",
                |m: &RawNebulaCertificateDetails| { &m.PublicKey },
                |m: &mut RawNebulaCertificateDetails| { &mut m.PublicKey },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "IsCA",
                |m: &RawNebulaCertificateDetails| { &m.IsCA },
                |m: &mut RawNebulaCertificateDetails| { &mut m.IsCA },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "Issuer",
                |m: &RawNebulaCertificateDetails| { &m.Issuer },
                |m: &mut RawNebulaCertificateDetails| { &mut m.Issuer },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RawNebulaCertificateDetails>(
                "RawNebulaCertificateDetails",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RawNebulaCertificateDetails {
        static instance: ::protobuf::rt::LazyV2<RawNebulaCertificateDetails> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RawNebulaCertificateDetails::new)
    }
}

impl ::protobuf::Clear for RawNebulaCertificateDetails {
    fn clear(&mut self) {
        self.Name.clear();
        self.Ips.clear();
        self.Subnets.clear();
        self.Groups.clear();
        self.NotBefore = 0;
        self.NotAfter = 0;
        self.PublicKey.clear();
        self.IsCA = false;
        self.Issuer.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RawNebulaCertificateDetails {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RawNebulaCertificateDetails {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\ncert.proto\x12\x04cert\"q\n\x14RawNebulaCertificate\x12;\n\x07Detail\
    s\x18\x01\x20\x01(\x0b2!.cert.RawNebulaCertificateDetailsR\x07Details\
    \x12\x1c\n\tSignature\x18\x02\x20\x01(\x0cR\tSignature\"\xf9\x01\n\x1bRa\
    wNebulaCertificateDetails\x12\x12\n\x04Name\x18\x01\x20\x01(\tR\x04Name\
    \x12\x10\n\x03Ips\x18\x02\x20\x03(\rR\x03Ips\x12\x18\n\x07Subnets\x18\
    \x03\x20\x03(\rR\x07Subnets\x12\x16\n\x06Groups\x18\x04\x20\x03(\tR\x06G\
    roups\x12\x1c\n\tNotBefore\x18\x05\x20\x01(\x03R\tNotBefore\x12\x1a\n\
    \x08NotAfter\x18\x06\x20\x01(\x03R\x08NotAfter\x12\x1c\n\tPublicKey\x18\
    \x07\x20\x01(\x0cR\tPublicKey\x12\x12\n\x04IsCA\x18\x08\x20\x01(\x08R\
    \x04IsCA\x12\x16\n\x06Issuer\x18\t\x20\x01(\x0cR\x06IssuerB\x20Z\x1egith\
    ub.com/slackhq/nebula/certJ\xb5\x07\n\x06\x12\x04\0\0\x1c\x01\n\x08\n\
    \x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\r\n\x08\n\x01\x08\
    \x12\x03\x03\05\n\t\n\x02\x08\x0b\x12\x03\x03\05\n6\n\x02\x04\0\x12\x04\
    \x07\0\n\x012*import\x20\"google/protobuf/timestamp.proto\";\n\n\n\n\x03\
    \x04\0\x01\x12\x03\x07\x08\x1c\n\x0b\n\x04\x04\0\x02\0\x12\x03\x08\x04,\
    \n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x08\x04\x1f\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03\x08\x20'\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x08*+\n\x0b\n\
    \x04\x04\0\x02\x01\x12\x03\t\x04\x18\n\x0c\n\x05\x04\0\x02\x01\x05\x12\
    \x03\t\x04\t\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\t\n\x13\n\x0c\n\x05\
    \x04\0\x02\x01\x03\x12\x03\t\x16\x17\n\n\n\x02\x04\x01\x12\x04\x0c\0\x1c\
    \x01\n\n\n\x03\x04\x01\x01\x12\x03\x0c\x08#\n\x0b\n\x04\x04\x01\x02\0\
    \x12\x03\r\x04\x14\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\r\x04\n\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x03\r\x0b\x0f\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\r\x12\x13\nW\n\x04\x04\x01\x02\x01\x12\x03\x10\x04\x1c\x1aJ\x20\
    Ips\x20and\x20Subnets\x20are\x20in\x20big\x20endian\x2032\x20bit\x20pair\
    s,\x201st\x20the\x20ip,\x202nd\x20the\x20mask\n\n\x0c\n\x05\x04\x01\x02\
    \x01\x04\x12\x03\x10\x04\x0c\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x10\
    \r\x13\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x10\x14\x17\n\x0c\n\x05\
    \x04\x01\x02\x01\x03\x12\x03\x10\x1a\x1b\n\x0b\n\x04\x04\x01\x02\x02\x12\
    \x03\x11\x04\x20\n\x0c\n\x05\x04\x01\x02\x02\x04\x12\x03\x11\x04\x0c\n\
    \x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x11\r\x13\n\x0c\n\x05\x04\x01\x02\
    \x02\x01\x12\x03\x11\x14\x1b\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x11\
    \x1e\x1f\n\x0b\n\x04\x04\x01\x02\x03\x12\x03\x13\x04\x1f\n\x0c\n\x05\x04\
    \x01\x02\x03\x04\x12\x03\x13\x04\x0c\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\
    \x03\x13\r\x13\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03\x13\x14\x1a\n\x0c\
    \n\x05\x04\x01\x02\x03\x03\x12\x03\x13\x1d\x1e\n\x0b\n\x04\x04\x01\x02\
    \x04\x12\x03\x14\x04\x18\n\x0c\n\x05\x04\x01\x02\x04\x05\x12\x03\x14\x04\
    \t\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03\x14\n\x13\n\x0c\n\x05\x04\x01\
    \x02\x04\x03\x12\x03\x14\x16\x17\n\x0b\n\x04\x04\x01\x02\x05\x12\x03\x15\
    \x04\x17\n\x0c\n\x05\x04\x01\x02\x05\x05\x12\x03\x15\x04\t\n\x0c\n\x05\
    \x04\x01\x02\x05\x01\x12\x03\x15\n\x12\n\x0c\n\x05\x04\x01\x02\x05\x03\
    \x12\x03\x15\x15\x16\n\x0b\n\x04\x04\x01\x02\x06\x12\x03\x16\x04\x18\n\
    \x0c\n\x05\x04\x01\x02\x06\x05\x12\x03\x16\x04\t\n\x0c\n\x05\x04\x01\x02\
    \x06\x01\x12\x03\x16\n\x13\n\x0c\n\x05\x04\x01\x02\x06\x03\x12\x03\x16\
    \x16\x17\n\x0b\n\x04\x04\x01\x02\x07\x12\x03\x18\x04\x12\n\x0c\n\x05\x04\
    \x01\x02\x07\x05\x12\x03\x18\x04\x08\n\x0c\n\x05\x04\x01\x02\x07\x01\x12\
    \x03\x18\t\r\n\x0c\n\x05\x04\x01\x02\x07\x03\x12\x03\x18\x10\x11\n`\n\
    \x04\x04\x01\x02\x08\x12\x03\x1b\x04\x15\x1aS\x20sha-256\x20of\x20the\
    \x20issuer\x20certificate,\x20if\x20this\x20field\x20is\x20blank\x20the\
    \x20cert\x20is\x20self-signed\n\n\x0c\n\x05\x04\x01\x02\x08\x05\x12\x03\
    \x1b\x04\t\n\x0c\n\x05\x04\x01\x02\x08\x01\x12\x03\x1b\n\x10\n\x0c\n\x05\
    \x04\x01\x02\x08\x03\x12\x03\x1b\x13\x14b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
